#!/usr/bin/env bash

# parse command line flags
function parseFlags {
	projectWebpage="github.com/AndreiUlmeyda/oil"
	parsingLibraryError="oil error: 'getopt' needs to be available on your system in order to run oil"
	helpText="Oil is a command line utility to quickly search, select and open your buku-managed bookmarks in your browser. When invoked with one of the flags -t/--tag, -T/--title, -d/--delete it runs in different modes to add tags to/edit the titles of/delete your bookmarks. For a more complete reference visit $projectWebpage."

	# check if getopt is available
	getopt --test > /dev/null
	if [[ $? -ne 4 ]]; then
	    echo "$parsingLibraryError"
	    exit 1
	fi

	# specify valid flags
	shortOptions=hatTpd
	longOptions=help,add,tag,title,delete,no-peco-reconfiguration

	parsed=$(getopt --options $shortOptions --longoptions $longOptions --name "$0" -- "$@")

	# exit if parsing arguments failed
	if [[ $? -ne 0 ]]; then
	    exit 1
	fi

	while true; do
	    case "$1" in
	    	-h|--help) echo "$helpText"; exit 0;;
			-a|--add) mode="add"; skipSelection=true; shift;;
	        -t|--tag) mode="tag"; shift;;
	        -T|--title) mode="title"; shift;;
	        -d|--delete) mode="delete"; shift;;
	        -p|--no-peco-reconfiguration) forceMultilineSelection=false; shift;;
	        *) break;;
	    esac
	done
}

# if not specified otherwise, make a temporary file for use as a custom peco
# config that has multiline selection enabled
function prepareMultilineSelection {
	if [[ "$forceMultilineSelection" == true ]]; then
		tmpPecoConfig=$(mktemp /tmp/oil-multiline-selection.XXX)
		config="{\"Prompt\":\"$mode\",\"StickySelection\": true,\"Action\":{\"selectAndMoveDown\":[\"peco.ToggleSelection\",\"peco.SelectDown\"]},\"Keymap\":{\"C-Space\":\"selectAndMoveDown\",\"ArrowLeft\":\"peco.ScrollLeft\",\"ArrowRight\":\"peco.ScrollRight\"}}"
		echo "$config" > "$tmpPecoConfig"
	fi
}

function deleteTmpFiles {
	if [[ -e $tmpPecoConfig ]]; then
		rm "$tmpPecoConfig"
	fi
}

function updateTitle {
	index="${1#*|}"
	buku --print "$index"
	read -r -p "Enter a new title for the bookmark above: " newTitle
	if [[ -n $newTitle ]]; then
		buku --tacit --update "$index" --title "$newTitle"
	else
		echo "The new title was empty, no update was done."
	fi
}

function updateTitles {
	forEachBookmark updateTitle
}

function deleteBookmark {
	url="${urlAndIndex%|*}"
	withoutTrailingSlash="${url%/}"
	buku --sany "$withoutTrailingSlash" --delete
}

function deleteBookmarks {
	forEachBookmark deleteBookmark
}

function tagBookmark {
	index="${1#*|}"
	buku --update "$index" --tag "$tags"
}

function askUserForTags {
	read -r -p "Input the comma separated list of tags to add: " tags
	echo "$tags"
}

function tagBookmarks {
	tags=$(askUserForTags)
	forEachBookmark tagBookmark
}

function openInBrowser {
	url=${urlAndIndex%|*}
	xdg-open "$url"
}

function forEachBookmark {
	operation=$1
	for urlAndIndex in ${selection[@]}; do
		${operation} "$urlAndIndex"
	done
}

function openBookmarks {
	forEachBookmark openInBrowser
}

function exitOnEmptySelection {
	if [[ -z "${selection[@]}" ]]; then
		exit 0
	fi
}

function searchAsYouType {
	# pass multiline-selection config, show mode of operation, enable
	# passing strings to peco which are not displayed but used as output
	if [[ "$forceMultilineSelection" == true ]]; then
		peco --rcfile "$tmpPecoConfig" --null
	else
		peco --prompt "$mode" --null
	fi
}

function formatColumns {
        "$LD_LIBRARY_PATH"/format-columns.awk
}

function jsonToLine {
	"$LD_LIBRARY_PATH"/json-to-line.jq
}

function bookmarksAsJson {
	buku --print --json
}

function searchAndSelectBookmarks {
	bookmarksAsJson |
	jsonToLine |
	formatColumns |
	searchAsYouType
}

function askForTitleAndTagsThenAdd {
	url=$1
	read -p "Enter a title to set a custom one, leave empty otherwise: " customTitle
	tags=$(askUserForTags)
	addBookmark="buku --add $url"
	if [[ -n "$customTitle" ]]; then
		addBookmark="$addBookmark --title $customTitle"
	fi
	if [[ -n "$tags" ]]; then
		addBookmark="$addBookmark --tag $tags"
	fi
	$addBookmark
}

function addBookmarkFromClipboard {
	urlFromClipboard=$(xsel)

	if [[ -n "$urlFromClipboard" ]]; then
		echo "$urlFromClipboard"
		read -p "Create a new bookmark using the above as URL? (y/n): " confirmation
		case "${confirmation:0:3}" in
		    y|Y|yes|Yes ) askForTitleAndTagsThenAdd "$urlFromClipboard";;
		    * )   echo "Adding bookmark was cancelled.";;
		esac
	else
		echo "Clipboard is empty, not adding any bookmarks."
		exit 0
	fi

	exit 0
}

function processBookmarks {
	if [[ "$mode" == "add" ]]; then
		addBookmarkFromClipboard
		exit 0
	fi

	selection=$(searchAndSelectBookmarks)
	exitOnEmptySelection

	case "$mode" in
		open) openBookmarks;;
		tag) tagBookmarks;;
		title) updateTitles;;
		delete) deleteBookmarks;;
	esac
}

# globals
mode="open"
forceMultilineSelection=true
declare -a selection

# run
parseFlags "$@"
prepareMultilineSelection
processBookmarks
deleteTmpFiles
